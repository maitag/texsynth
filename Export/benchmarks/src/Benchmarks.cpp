// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Benchmarks
#include <Benchmarks.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_texsynth_PixelMatrix
#include <texsynth/PixelMatrix.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9c48073bb7de77c5_13_main,"Benchmarks","main",0x5e46a671,"Benchmarks.main","Benchmarks.hx",13,0xf36a4b48)
HX_LOCAL_STACK_FRAME(_hx_pos_9c48073bb7de77c5_30_setPixelPerformance,"Benchmarks","setPixelPerformance",0x925a6d94,"Benchmarks.setPixelPerformance","Benchmarks.hx",30,0xf36a4b48)
HX_LOCAL_STACK_FRAME(_hx_pos_9c48073bb7de77c5_44_getPixelPerformance,"Benchmarks","getPixelPerformance",0x55bd7a88,"Benchmarks.getPixelPerformance","Benchmarks.hx",44,0xf36a4b48)

void Benchmarks_obj::__construct() { }

Dynamic Benchmarks_obj::__CreateEmpty() { return new Benchmarks_obj; }

void *Benchmarks_obj::_hx_vtable = 0;

Dynamic Benchmarks_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Benchmarks_obj > _hx_result = new Benchmarks_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Benchmarks_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d2a9d36;
}

void Benchmarks_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_9c48073bb7de77c5_13_main)
HXLINE(  14)		 ::texsynth::PixelMatrix image;
HXLINE(  24)		 ::texsynth::PixelMatrix this1 =  ::texsynth::PixelMatrix_obj::__alloc( HX_CTX ,(int)4096,(int)4096);
HXDLIN(  24)		image = this1;
HXLINE(  25)		::Benchmarks_obj::setPixelPerformance(image,(int)2);
HXLINE(  26)		::Benchmarks_obj::getPixelPerformance(image,(int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Benchmarks_obj,main,(void))

void Benchmarks_obj::setPixelPerformance( ::texsynth::PixelMatrix image,int loops){
            	HX_STACKFRAME(&_hx_pos_9c48073bb7de77c5_30_setPixelPerformance)
HXLINE(  31)		int a = (int)0;
HXLINE(  32)		Float time = ::__time_stamp();
HXLINE(  34)		{
HXLINE(  34)			int _g1 = (int)0;
HXDLIN(  34)			int _g = loops;
HXDLIN(  34)			while((_g1 < _g)){
HXLINE(  34)				_g1 = (_g1 + (int)1);
HXDLIN(  34)				int i = (_g1 - (int)1);
HXLINE(  35)				{
HXLINE(  35)					int _g3 = (int)0;
HXDLIN(  35)					int _g2 = image->width;
HXDLIN(  35)					while((_g3 < _g2)){
HXLINE(  35)						_g3 = (_g3 + (int)1);
HXDLIN(  35)						int x = (_g3 - (int)1);
HXLINE(  36)						{
HXLINE(  36)							int _g5 = (int)0;
HXDLIN(  36)							int _g4 = image->height;
HXDLIN(  36)							while((_g5 < _g4)){
HXLINE(  36)								_g5 = (_g5 + (int)1);
HXDLIN(  36)								int y = (_g5 - (int)1);
HXLINE(  37)								{
HXLINE(  37)									 ::haxe::io::Bytes _this = image->data;
HXDLIN(  37)									int pos = (((y * image->width) + x) * (int)4);
HXDLIN(  37)									_this->b[pos] = a;
HXDLIN(  37)									::Array< unsigned char > _this1 = _this->b;
HXDLIN(  37)									_this1[(pos + (int)1)] = ((int)a >> (int)(int)8);
HXDLIN(  37)									::Array< unsigned char > _this2 = _this->b;
HXDLIN(  37)									_this2[(pos + (int)2)] = ((int)a >> (int)(int)16);
HXDLIN(  37)									::Array< unsigned char > _this3 = _this->b;
HXDLIN(  37)									_this3[(pos + (int)3)] = hx::UShr(a,(int)24);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  39)		time = (::__time_stamp() - time);
HXLINE(  40)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  40)		::String _hx_tmp1 = ((((HX_("PixelData setpixel (",1c,cf,d2,67) + image->width) + HX_("x",78,00,00,00)) + image->height) + HX_("):\t",f8,4e,1f,00));
HXDLIN(  40)		::String _hx_tmp2 = (_hx_tmp1 + ::Std_obj::_hx_int((time * (int)1000)));
HXDLIN(  40)		_hx_tmp(_hx_tmp2,hx::SourceInfo(HX_("Benchmarks.hx",48,4b,6a,f3),40,HX_("Benchmarks",36,9d,2a,0d),HX_("setPixelPerformance",cc,1c,16,36)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Benchmarks_obj,setPixelPerformance,(void))

void Benchmarks_obj::getPixelPerformance( ::texsynth::PixelMatrix image,int loops){
            	HX_STACKFRAME(&_hx_pos_9c48073bb7de77c5_44_getPixelPerformance)
HXLINE(  45)		int a = (int)0;
HXLINE(  46)		Float time = ::__time_stamp();
HXLINE(  48)		{
HXLINE(  48)			int _g1 = (int)0;
HXDLIN(  48)			int _g = loops;
HXDLIN(  48)			while((_g1 < _g)){
HXLINE(  48)				_g1 = (_g1 + (int)1);
HXDLIN(  48)				int i = (_g1 - (int)1);
HXLINE(  49)				{
HXLINE(  49)					int _g3 = (int)0;
HXDLIN(  49)					int _g2 = image->width;
HXDLIN(  49)					while((_g3 < _g2)){
HXLINE(  49)						_g3 = (_g3 + (int)1);
HXDLIN(  49)						int x = (_g3 - (int)1);
HXLINE(  50)						{
HXLINE(  50)							int _g5 = (int)0;
HXDLIN(  50)							int _g4 = image->height;
HXDLIN(  50)							while((_g5 < _g4)){
HXLINE(  50)								_g5 = (_g5 + (int)1);
HXDLIN(  50)								int y = (_g5 - (int)1);
HXLINE(  51)								 ::haxe::io::Bytes _this = image->data;
HXDLIN(  51)								int pos = (((y * image->width) + x) * (int)4);
HXDLIN(  51)								int _this1 = _this->b->__get(pos);
HXDLIN(  51)								::Array< unsigned char > _this2 = _this->b;
HXDLIN(  51)								int a1 = ((int)_this1 | (int)((int)_this2->__get((pos + (int)1)) << (int)(int)8));
HXDLIN(  51)								::Array< unsigned char > _this3 = _this->b;
HXDLIN(  51)								int a2 = ((int)a1 | (int)((int)_this3->__get((pos + (int)2)) << (int)(int)16));
HXDLIN(  51)								::Array< unsigned char > _this4 = _this->b;
HXDLIN(  51)								a = ((int)a2 | (int)((int)_this4->__get((pos + (int)3)) << (int)(int)24));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  53)		time = (::__time_stamp() - time);
HXLINE(  54)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  54)		::String _hx_tmp1 = ((((HX_("PixelData getpixel (",a8,30,55,64) + image->width) + HX_("x",78,00,00,00)) + image->height) + HX_("):\t",f8,4e,1f,00));
HXDLIN(  54)		::String _hx_tmp2 = (_hx_tmp1 + ::Std_obj::_hx_int((time * (int)1000)));
HXDLIN(  54)		_hx_tmp(_hx_tmp2,hx::SourceInfo(HX_("Benchmarks.hx",48,4b,6a,f3),54,HX_("Benchmarks",36,9d,2a,0d),HX_("getPixelPerformance",c0,29,79,f9)));
HXLINE(  56)		if ((a != (int)0)) {
HXLINE(  56)			::haxe::Log_obj::trace(HX_("ERROR",a8,03,18,f1),hx::SourceInfo(HX_("Benchmarks.hx",48,4b,6a,f3),56,HX_("Benchmarks",36,9d,2a,0d),HX_("getPixelPerformance",c0,29,79,f9)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Benchmarks_obj,getPixelPerformance,(void))


Benchmarks_obj::Benchmarks_obj()
{
}

bool Benchmarks_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setPixelPerformance") ) { outValue = setPixelPerformance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixelPerformance") ) { outValue = getPixelPerformance_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Benchmarks_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Benchmarks_obj_sStaticStorageInfo = 0;
#endif

static void Benchmarks_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Benchmarks_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Benchmarks_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Benchmarks_obj::__mClass,"__mClass");
};

#endif

hx::Class Benchmarks_obj::__mClass;

static ::String Benchmarks_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("setPixelPerformance","\xcc","\x1c","\x16","\x36"),
	HX_HCSTRING("getPixelPerformance","\xc0","\x29","\x79","\xf9"),
	::String(null())
};

void Benchmarks_obj::__register()
{
	hx::Object *dummy = new Benchmarks_obj;
	Benchmarks_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Benchmarks","\x36","\x9d","\x2a","\x0d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Benchmarks_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Benchmarks_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Benchmarks_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Benchmarks_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Benchmarks_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Benchmarks_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Benchmarks_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

