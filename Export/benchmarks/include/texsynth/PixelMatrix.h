// Generated by Haxe 3.4.7
#ifndef INCLUDED_texsynth_PixelMatrix
#define INCLUDED_texsynth_PixelMatrix

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(texsynth,PixelMatrix)

namespace texsynth{


class HXCPP_CLASS_ATTRIBUTES PixelMatrix_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef PixelMatrix_obj OBJ_;
		PixelMatrix_obj();

	public:
		enum { _hx_ClassId = 0x61465832 };

		void __construct(int width,int height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="texsynth.PixelMatrix")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"texsynth.PixelMatrix"); }
		static hx::ObjectPtr< PixelMatrix_obj > __new(int width,int height);
		static hx::ObjectPtr< PixelMatrix_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PixelMatrix_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PixelMatrix","\x47","\xb1","\x87","\x11"); }

		int width;
		int height;
		 ::haxe::io::Bytes data;
};

} // end namespace texsynth

#endif /* INCLUDED_texsynth_PixelMatrix */ 
