// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_texsynth_PixelMatrix
#include <texsynth/PixelMatrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_96fd0366daa9212a_23_new,"texsynth.PixelMatrix","new",0xa6612080,"texsynth.PixelMatrix.new","texsynth/PixelMatrix.hx",23,0xc2800eb1)
namespace texsynth{

void PixelMatrix_obj::__construct(int width,int height){
            	HX_STACKFRAME(&_hx_pos_96fd0366daa9212a_23_new)
HXLINE(  24)		this->width = width;
HXLINE(  25)		this->height = height;
HXLINE(  32)		this->data = ::haxe::io::Bytes_obj::alloc(((width * height) * (int)4));
            	}

Dynamic PixelMatrix_obj::__CreateEmpty() { return new PixelMatrix_obj; }

void *PixelMatrix_obj::_hx_vtable = 0;

Dynamic PixelMatrix_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PixelMatrix_obj > _hx_result = new PixelMatrix_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PixelMatrix_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61465832;
}


hx::ObjectPtr< PixelMatrix_obj > PixelMatrix_obj::__new(int width,int height) {
	hx::ObjectPtr< PixelMatrix_obj > __this = new PixelMatrix_obj();
	__this->__construct(width,height);
	return __this;
}

hx::ObjectPtr< PixelMatrix_obj > PixelMatrix_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height) {
	PixelMatrix_obj *__this = (PixelMatrix_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PixelMatrix_obj), true, "texsynth.PixelMatrix"));
	*(void **)__this = PixelMatrix_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

PixelMatrix_obj::PixelMatrix_obj()
{
}

void PixelMatrix_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PixelMatrix);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void PixelMatrix_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(data,"data");
}

hx::Val PixelMatrix_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PixelMatrix_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PixelMatrix_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PixelMatrix_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PixelMatrix_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(PixelMatrix_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(PixelMatrix_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PixelMatrix_obj_sStaticStorageInfo = 0;
#endif

static ::String PixelMatrix_obj_sMemberFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	::String(null()) };

static void PixelMatrix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PixelMatrix_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PixelMatrix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PixelMatrix_obj::__mClass,"__mClass");
};

#endif

hx::Class PixelMatrix_obj::__mClass;

void PixelMatrix_obj::__register()
{
	hx::Object *dummy = new PixelMatrix_obj;
	PixelMatrix_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("texsynth.PixelMatrix","\x8e","\x20","\xaf","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PixelMatrix_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PixelMatrix_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PixelMatrix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PixelMatrix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PixelMatrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PixelMatrix_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace texsynth
