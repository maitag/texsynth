// Generated by Haxe 3.4.7
#ifndef INCLUDED_Benchmarks
#define INCLUDED_Benchmarks

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Benchmarks)
HX_DECLARE_CLASS1(texsynth,PixelMatrix)



class HXCPP_CLASS_ATTRIBUTES Benchmarks_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Benchmarks_obj OBJ_;
		Benchmarks_obj();

	public:
		enum { _hx_ClassId = 0x0d2a9d36 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Benchmarks")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Benchmarks"); }

		hx::ObjectPtr< Benchmarks_obj > __new() {
			hx::ObjectPtr< Benchmarks_obj > __this = new Benchmarks_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Benchmarks_obj > __alloc(hx::Ctx *_hx_ctx) {
			Benchmarks_obj *__this = (Benchmarks_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Benchmarks_obj), false, "Benchmarks"));
			*(void **)__this = Benchmarks_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Benchmarks_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Benchmarks","\x36","\x9d","\x2a","\x0d"); }

		static void main();
		static ::Dynamic main_dyn();

		static void setPixelPerformance( ::texsynth::PixelMatrix image,int loops);
		static ::Dynamic setPixelPerformance_dyn();

		static void getPixelPerformance( ::texsynth::PixelMatrix image,int loops);
		static ::Dynamic getPixelPerformance_dyn();

};


#endif /* INCLUDED_Benchmarks */ 
